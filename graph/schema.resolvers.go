package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/seanb4t/example-movie-service/graph/model"
)

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	_, err := r.ginContext(ctx)
	if err != nil {
		return nil, err
	}

	panic(fmt.Errorf("not implemented: Movies - movies"))
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, id string) (*model.Movie, error) {
	_, err := r.ginContext(ctx)
	if err != nil {
		return nil, err
	}
	panic(fmt.Errorf("not implemented: Movie - movie"))
}

// Actors is the resolver for the actors field.
func (r *queryResolver) Actors(ctx context.Context) ([]*model.Actor, error) {
	_, err := r.ginContext(ctx)
	if err != nil {
		return nil, err
	}
	panic(fmt.Errorf("not implemented: Actors - actors"))
}

// Actor is the resolver for the actor field.
func (r *queryResolver) Actor(ctx context.Context, id string) (*model.Actor, error) {
	_, err := r.ginContext(ctx)
	if err != nil {
		return nil, err
	}
	panic(fmt.Errorf("not implemented: Actor - actor"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
